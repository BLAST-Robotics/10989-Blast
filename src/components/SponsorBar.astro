---
import { Image } from 'astro:assets';
import sponsorsData from '../data/sponsors.json';

// Minimum number of sponsors to display for smooth scrolling
const minSponsors = 6;
const sponsorsToDisplay = sponsorsData.length < minSponsors 
  ? Array.from({ length: Math.ceil(minSponsors / sponsorsData.length) }, () => sponsorsData).flat()
  : sponsorsData;
---

<div class="bg-base-200 border-b border-base-300 py-4 overflow-hidden">
  <div class="relative">
    <div class="flex animate-scroll">
      <!-- Multiple sets of sponsors for better coverage on large screens -->
      {Array.from({ length: 4 }, (_, setIndex) => (
        <>
          <div class="flex space-x-8 shrink-0">
            {sponsorsToDisplay.map((sponsor, index) => (
              <a 
                href={sponsor.website} 
                target="_blank" 
                rel="noopener noreferrer"
                class="flex-shrink-0 group transition-all duration-300 hover:scale-105"
                aria-label={`Visit ${sponsor.name} website`}
                title={sponsor.description}
                key={`set-${setIndex}-${index}`}
              >
                <div class="rounded-lg shadow-sm group-hover:shadow-md transition-shadow duration-300 h-16 flex items-center justify-center min-w-[120px] border border-gray-200" style={`background-color: ${sponsor.bg || 'black'}; padding: ${sponsor.padding || '16'}%;`}>
                  <Image 
                    src={sponsor.logo} 
                    alt={`${sponsor.name} logo`} 
                    class="max-h-full max-w-full object-contain transition-all duration-300" 
                    width={120}
                    height={32}
                    loading={setIndex === 0 && index < 4 ? "eager" : "lazy"}
                    format="webp"
                  />
                </div>
              </a>
            ))}
          </div>
          
          {/* Gap between sets */}
          <div class="w-8 shrink-0"></div>
        </>
      ))}
    </div>
  </div>
</div>

<style>
  @keyframes scroll {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }
  
  .animate-scroll {
    animation: scroll 40s linear infinite;
    display: flex;
    width: fit-content;
  }
  
  .animate-scroll:hover {
    animation-play-state: paused;
  }
  
  /* Ensure container overflow is hidden */
  .overflow-hidden {
    position: relative;
  }
  
  /* Add smooth fade edges for better visual */
  .overflow-hidden::before,
  .overflow-hidden::after {
    content: '';
    position: absolute;
    top: 0;
    width: 40px;
    height: 100%;
    z-index: 10;
    pointer-events: none;
  }
  
  .overflow-hidden::before {
    left: 0;
    background: linear-gradient(to right, rgb(229 231 235), transparent);
  }
  
  .overflow-hidden::after {
    right: 0;
    background: linear-gradient(to left, rgb(229 231 235), transparent);
  }
</style>

<script>
  // Calculate the exact width for seamless scrolling with multiple sets
  document.addEventListener('DOMContentLoaded', () => {
    const scrollContainer = document.querySelector('.animate-scroll');
    if (scrollContainer) {
      // Get the first sponsor set and gap
      const firstSet = scrollContainer.children[0]; // First sponsor set
      const firstGap = scrollContainer.children[1]; // First gap
      const moveDistance = firstSet.offsetWidth + firstGap.offsetWidth;
      
      // Create a dynamic CSS rule for the exact movement
      const style = document.createElement('style');
      style.textContent = `
        .animate-scroll {
          animation: scroll 50s linear infinite;
        }
        @keyframes scroll {
          0% { transform: translateX(0); }
          100% { transform: translateX(-${moveDistance}px); }
        }
      `;
      document.head.appendChild(style);
    }
  });
</script>
